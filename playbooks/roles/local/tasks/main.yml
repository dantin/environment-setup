---

# preflight checks
- name: Detect outbound network
  shell: >
    warn=no
    curl -s --connect-timeout 10 www.baidu.com >/dev/null 2>&1; echo $?
  changed_when: false
  register: outbound_network_st

- name: Set outbound network fact
  set_fact: has_outbound_network={{ outbound_network_st.stdout.strip() == '0' }}

- fail:
    msg: "The Control Machine must have access to the Internet in order to download open-source binaries souce code."
  when: not has_outbound_network

- name: Create downloads directory
  file: path="{{ item }}" state=directory mode=0755
  with_items:
    - "conf"
    - "{{ downloads_dir }}"
    - "{{ resources_dir }}"
    - "{{ resources_dir }}/bin"

- name: Load third party source code variables
  include_vars:
    dir: /roles/common/vars/thirdparty
    files_matching: source.yml

- name: Download third-party code
  get_url:
    url: "{{ item.url }}"
    dest: "{{ downloads_dir }}/{{ item.name }}-{{ item.version }}.tar.gz"
    checksum: "{{ item.checksum | default(omit) }}"
    validate_certs: no
  register: get_url_result
  until: "'OK' in get_url_result.msg or 'file already exists' in get_url_result.msg"
  retries: "{{ retry_count }}"
  delay: "{{ retry_stagger | random + 3 }}"
  with_items: "{{ third_party_code }}"
  when:
    - has_outbound_network

      #- name: Download third-party binary
      #  get_url:
      #    url: "{{ item.url }}"
      #    dest: "{{ downloads_dir }}/{{ item.name }}-{{ item.version }}.tar.gz"
      #    checksum: "{{ item.checksum | default(omit) }}"
      #    validate_certs: no
      #  register: get_url_result
      #  until: "'OK' in get_url_result.msg or 'file already exists' in get_url_result.msg"
      #  retries: "{{ retry_count }}"
      #  delay: "{{ retry_stagger | random + 3 }}"
      #  with_items: "{{ third_party_binary }}"
      #  when:
      #    - has_outbound_network

- name: Copy open-source source code
  shell: >
    cp -v "{{ downloads_dir }}/{{ item.name }}-{{ item.version }}.tar.gz" "{{ resources_dir }}/bin"
  with_items:
    - "{{ third_party_code }}"
      #- "{{ third_party_binary }}"

- name: Clean up downloads directory
  shell: >
    cd "{{ downloads_dir }}" && find . -mindepth 1 -maxdepth 1 -type f -exec rm -rf {} \;
